# Ce code permet la cr√©ation d‚Äôun endpoint POST pour recevoir un document via une requ√™te HTTP.

from fastapi import FastAPI # Import de FastAPI pour cr√©er une appli web/API
from pydantic import BaseModel # Pydantic = Biblioth√®que qui permet de valider automatiquement les donn√©es => permet de d√©finir les mod√®les de donn√©es (ex: les sch√©mas...)


app = FastAPI() # Cr√©ation de l'instance de mon appli FastAPI qui va me permettre de d√©finir les routes (ici @app.post)

class Document(BaseModel): # D√©clareration de ma classe 'Document' qui va h√©riter de BaseModel (automatiquement valid√©e et convertie par FastAPI/Pydantic)
    # Structure atttendue quand on re√ßoit un document via une requ√™te
    id:int  
    title:str
    content:str

fake_db = [] # Fausse base de donn√©e d'une liste vide pour stocker les documents re√ßus (on utilisera une vraie base de donn√©e plus tard)

@app.get("/")
def read_root():
    return {"message": "Bienvenue sur ton API FastAPI üëã"}
 
@app.post("/documents") # D√©clare un endpoint POST √† l'URL /document    POST http://localhost:8000/documents (un fichier json sera attendu)
def create_document(doc: Document): # FastAPI attend un json, le converti en un objet Document, valide les types et le passe dans doc
    fake_db.append(doc) # Ajout de l'objet recu √† la liste fake_db
    return {"message": "document created", "doc": doc} # Renvoie une r√©ponse JSON au client avec un message et le document re√ßu 